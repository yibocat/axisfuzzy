#  Copyright (c) yibocat 2025 All Rights Reserved
#  Python: 3.10.9
#  Date: 2025/8/15 00:53
#  Author: yibow
#  Email: yibocat@yeah.net
#  Software: FuzzLab
import threading
from pathlib import Path
from typing import Any, Union, Optional, Dict, List
from .config_file import Config

class ConfigManager:
    _instance: Optional[ConfigManager]
    _lock: threading.Lock
    _config: Config
    _config_source: Optional[str]
    _is_modified: bool
    _observers: List[Any]
    _config_history: List[Any]
    _validation_rules: Dict[str, Any]
    _initialized: bool

    def __new__(cls) -> ConfigManager: ...
    def __init__(self) -> None: ...

    def get_config(self) -> Config: ...
    def set_config(self, **kwargs: Any) -> None: ...

    # 配置文件操作
    def load_config_file(self, file_path: Union[str, Path]) -> None: ...
    def save_config_file(self, file_path: Union[str, Path]) -> None: ...

    # 配置管理
    def reset_config(self) -> None: ...
    def is_modified(self) -> bool: ...
    def get_config_source(self) -> Optional[str]: ...

    # 配置验证
    def _validate_parameter(self, param_name: str, value: Any) -> None: ...

    # 诊断和工具方法
    def get_config_summary(self) -> Dict[str, Any]: ...
    def validate_all_config(self) -> List[str]: ...

    @staticmethod
    def create_config_template(file_path: Union[str, Path]) -> None: ...

    # 未来扩展预留接口
    def add_config_observer(self, observer: Any) -> None: ...
    def remove_observer(self, observer: Any) -> None: ...
    def get_config_history(self) -> List[Any]: ...